<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on A Technical Blog</title>
    <link>https://www.gagua.xyz/categories/web/</link>
    <description>Recent content in web on A Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.gagua.xyz/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vue Router:The Front-End Routing </title>
      <link>https://www.gagua.xyz/p/vue-routerthe-front-end-routing/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/vue-routerthe-front-end-routing/</guid>
      <description>Router 最近在学习Vue这个前端框架1，看到Routing这一节时觉得很费解，不明白为什么要弄一套Vue router库。
我认为所谓路由，应该就是指URL跳转到对应的页面的一个映射方法。
Nginx 在nginx中可以通过配置文件来进行路由设定：
location /path/ {root xxx;index xxx.html;}通过正则匹配来进行路由映射。
既然已经有现成的路由方法了，为什么前端框架还是要自己弄一套新的路由方法呢？
Front-End Routing 查阅之后，发现有前端和后端路由的区别，博客园上的一篇文章 让我对此稍微有了一点了解。
总而言之，后端路由需要绑定methods，并且随着页面变得复杂，代码耦合性强，难以维护。前端路由应时而出，解决了页面切换白屏和可复用等问题，不过也使得SEO困难。
通过js渲染界面：
&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;&amp;lt;title&amp;gt;Vue&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;xxxx.xxx.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;yyyy.yyy.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;zzzz.zzz.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;前端路由有两种方式：
 Hash模式 History模式  Hash模式利用的是浏览器不会对#号后面的路径对服务端发起路由请求， 而History模式利用的是HTML5的History API，所以不能兼容低版本IE。
写在最后 从业经历不足半年在这还真是吃亏，古人说，以史为鉴可以知兴替。没有切身体会过前端的古早时代的我，难以理解一些新的概念。曾经的我2无法理解为什么要弄出Composition API，为什么会有IE的兼容问题，为什么要做状态管理，为什么要做前端路由。在ES6之前连模块导入这种概念都没有的Javascript是怎么成为浏览器运行时的事实标准的。
不过这个又回到了一个有点接近哲学的问题，没有亲身体验过，人能了解事物的本质吗？如果说只有实践才能出真知，那么，实践的方法到底有哪些？实践的风险与收益如何平衡？人的有穷和事物的无穷，又该如何选择？
  或者说Javascript库。 &amp;#x21a9;&amp;#xfe0e;
 也许现在我也只是以为我懂了。 &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>Google Analytics And SEO</title>
      <link>https://www.gagua.xyz/p/google-analytics-and-seo/</link>
      <pubDate>Fri, 05 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/google-analytics-and-seo/</guid>
      <description>Google Analytics Followed Hugo documents, I&amp;rsquo;d like to implement some extra features on my blog site such as GA. Here are description about GA:
 Google Analytics lets you measure your advertising ROI as well as track your Flash, video, and social networking sites and applications.
 Registration Google for Google Analytics，login in using personal google account1. Add an user then create an application of website, it would generate a tracking id after choose data stream.</description>
    </item>
    
    <item>
      <title>Auto Pull Using Webhook And Nodejs</title>
      <link>https://www.gagua.xyz/p/auto-pull-using-webhook-and-nodejs/</link>
      <pubDate>Fri, 08 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/auto-pull-using-webhook-and-nodejs/</guid>
      <description>Purpose I need to build a webserver using nodejs which listens to a certain port. Besides, writing a simple shell script to implement auto pull is necessary. It&amp;rsquo;s vital to find a approach which is able to parse a json content and execute shell scripts. Considering latent security problem, enable SSL verification and setting secret token is recommended.
install nodejs I first tried conda search node then find the version of nodejs in conda repository is not the latest version.</description>
    </item>
    
    <item>
      <title>Deploy A Static Blog Site</title>
      <link>https://www.gagua.xyz/p/deploy-a-static-blog-site/</link>
      <pubDate>Thu, 07 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/deploy-a-static-blog-site/</guid>
      <description>Deployment此时需要:WebServerinstall nginxdomain name and httpshttpswebhookgithookgithub webhook405Deployment网站如果只运行在local host那还叫啥网站啊，如果部署在一个具有公网ip的服务器，这样就能实现让几乎所有人都能通过浏览器访问自己的网站。blogdown文档中提供了多种部署方案，但在这里选择部署至一台自己的vps上。
此时需要:能通过互联网访问的主机（host）一台网站（博客）的文件client——浏览器server——webServer云计算，大数据如此火热的现在，主机现在显然不是问题。博客文件已经通过blogdown生成，浏览器也成为了大部分人的应用，接下来就只剩下webServer的问题了。
WebServerWebServer可以解析HTTP，响应(response)一个请求(request)，通常都是返回一个html文件来让浏览器进行浏览。在这里我选用的是nginx，一款主要由Igor Sysoev在业余时间开发的HTTP和反向代理的服务器。当然还有其他功能，不过我暂时用上的就只有这两个。webserver当然由很多，如Apache等，甚至可以用python等自己实现一个，但是为什么我会选择nginx？主要是因为nginx内存占用小，并发高（这一点对于我暂时没有什么用处），有着优秀的静态处理性能（关键）。这对于私人博客这样一个静态网站来说，是完美的选择。
install nginxnginx可以通过源码安装，但是在linux上想到的，果然还是yum优先。抱歉，由权限是真的可以为所欲为。
yum install nginx......no package nginx available？居然显示仓库中没有nginx，怎么可能？很好，我选择万能的conda。安装好miniconda之后，conda search nginx，果然有，完成下载。在浏览器访问主机的ip地址，出现以下的界面：
nginx 安装成功
注意，conda 安装的nginx将根目录设置的是conda所在目录。
git clone xxx.git从远程仓库git clone得到静态网页项目文件，之后的就是设置nginx的配置文件了。nginx -t直接找到配置文件位置</description>
    </item>
    
    <item>
      <title>Establish A Website With R Blogdown</title>
      <link>https://www.gagua.xyz/p/establish-a-website-by-r-blogdown/</link>
      <pubDate>Wed, 06 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/establish-a-website-by-r-blogdown/</guid>
      <description>缘起选型blogdown缘起Blogdown是由Yihui Xie基于Hugo编写的一个R包，用于便捷地进行静态网站的构建。由于Yihui大神和RStudio团队的不懈努力，一个充满活力的R语言社区得以构建。加上之前偶然尝试了Yihui的另一个R包Rmarkdown，不由惊为天人。恰巧最近也学了点web相关的知识，html,css,native js等等，于是就产生了构建一个博客的想法，顺便也能记录一些在探索中遇到的技术问题，分享数据可视化的一些美图，实践《计算机网络，自顶而下方法》，《深入理解计算机系统》。
选型Blogdown下载直接install.packages()，在比较新版本的RStudio IDE中，New Project中可以直接选择website using blogdown，RStudio会自动下载新版本的Hugo，在此也能选择主题(theme github)。在Hugo官网中纠结了很久，最后还是选了Stack作为我博客的主题，说实话第一眼还是配图吸引了我，果然人就是肤浅的视觉动物。分类、搜索、评论、无框架，在满足了我基本的需求之后，还能提供相对充裕的自定制空间。毕竟框架虽然强大，但却封装了技术细节，想弄懂又需要花费不少学习成本，好吧，懒癌晚期，if it works, don’t fix it?
blogdown在这想稍微详细说一下blogdown。众所周知，hugo是一款以Go开发的强大的静态网站生成器，那为什么还要开发blogdown呢？很简单，因为hugo暂时还没有完成对.Rmd的支持，但rmarkdown直接在网页中同时包含代码和生成的结果实在是太香了（其实还有更多的功能，但我就是个视觉动物）。Yihui因此开发了blogdown（有技术真的可以为所欲为吗），实现了对.Rmd的解析渲染，并且能实现bookdown、rmarkdown的绝大部分特性（yihui怎么又是你，难道这就是推荐式算法吗，信息茧房恐怖如斯），加上Shiny应该可以实现交互式的页面应用，很可惜我暂时还不懂shiny咋用。这里又要吹一波RSstudio了，Addins提供了包括新增post和插入image等操作的快捷方式。
blogdown addins
（啊，为什么本地加载图片会失败啊，哦，原来是生成路径的问题，rmd要加入/post/）
总之，blogdown:::serve_site()建立本地服务器用于预览，blogdown::build_site()后能得到一个默认为public的文件夹，里面就包含了博客所需要的所有文件。接下来就是github新建仓库, git commit, push remote一气呵成，很快啊。注意要在public文件夹建立仓库，因为建站所需的文件只有这些。
</description>
    </item>
    
  </channel>
</rss>
