<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Misc on A Technical Blog</title>
    <link>https://www.gagua.xyz/categories/misc/</link>
    <description>Recent content in Misc on A Technical Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://www.gagua.xyz/categories/misc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Fastx-Toolkit Install</title>
      <link>https://www.gagua.xyz/p/fastx-toolkit-install/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/fastx-toolkit-install/</guid>
      <description>FASTX-Toolkit 记录一下FASTX-Toolkit 安装时遇到的坑。作为一款FASTQ/A短reads预处理软件，它也算是有些年头了，所以在现在的安装环境下难免会存在一些问题，这里就把遇到的这些问题记录下来，以示后人。
install libgtextutils 这是一款用C和C++编写的软件，所以安装流程中可以选择通过源码安装，也可以选择通过预编译的二进制包安装。可以在冷泉港hannonlab实验室的官网上找到，不过预编译的二进制包只存在0.0.13的旧版本，所以这里选择通过源码安装。
值得注意的是，FASTX-Toolkit依赖于libgtextutils，所以选择先安装libgtextutils。解压后查看README文件，然后转到INSTALL文件查看安装方法，不过通常来说，C系列的软件安装都是三步走，即：
 ./configure make make install  对于有些软件来说可能略有不同，比如需要加上make test检验安装是否完成，对于使用Cmake安装的，等以后有空再来研究吧。这里有个问题就是这种方法安装的软件怎么卸载呢？直接把安装文件夹给删了，总觉的很简单粗暴，但是也没见到有make uninstall这个指令呀。
Prefix 这里就很奇怪了，明明INSTALL文件夹里提到了默认文件夹可以用以上三个步骤，但我重复之后会发现奇奇怪怪的Bug，显示安装已经完成但是却找不到libgtextutils这个依赖项。后面才发现，手动指定文件夹路径就不会有问题了。./configure --prefix=/PATH/TO/INSTALL，值得注意的是，这里的路径要采用绝对路径，不能用~指代根目录，说实话让人觉得非常不习惯。
 在make步骤中，会发生一些麻烦，比如说
text_line_reader.cpp...return input_stream() ;这个是由于GCC版本导致的问题，如果大于4.8.5就会报错
gcc --versionx86_64-conda-linux-gnu-gcc (crosstool-NG 1.24.0.133_b0863d8_dirty) 7.5.0Copyright (C) 2017 Free Software Foundation, Inc.This is free software; see the source for copying conditions. There is NOwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.可以考虑降低GCC版本到要求或者修改text_line_reader.cpp文件
return input_stream.good() ;install FASTX-Toolkit 安装完成后用同样的方法尝试安装FASTX-Toolkit，这时会在第一步生成配置文件时就发现问题，不过这个很容易解决，按照错误提示:</description>
    </item>
    
    <item>
      <title>甘雨：梦里韶光</title>
      <link>https://www.gagua.xyz/p/index.zh-cn/</link>
      <pubDate>Fri, 22 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/index.zh-cn/</guid>
      <description>可圈可点 原神，本来以为开放世界探索和氪金抽卡内核的冲突会导致游戏体验撕裂，结果成绩居然意料之外的不错。不过也没办法，毕竟原神作为一款手游可以说对其他游戏是降维打击。因为时间的缘故没法继续玩原神，不过消息还是一直在关注。新角色甘雨的PV实在是太完美了，miHoYo不只是美工，连音乐也是神啊！BGM是璃月战斗曲的变奏，与PV画面可以说相当的契合，急促轻缓的节奏变化非常吸引人，不懂如何用专业术语评价，总之就是好听就完事了！甘雨老婆！</description>
    </item>
    
    <item>
      <title>Integrated R Workflow</title>
      <link>https://www.gagua.xyz/p/integrated-r-workflow/</link>
      <pubDate>Tue, 19 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://www.gagua.xyz/p/integrated-r-workflow/</guid>
      <description>Shiny 最近导师觉得找我要图太麻烦了，就让我弄一个网页版的工具来进行可视化。虽然这事之前确实没做过，不过对Shiny还算有所耳闻，初步想了一下，感觉不算什么太难的事情，就答应了1。
Shiny也算是Rstudio强推的一个通过R构建交互式网页的工具，不得不感慨一下Rstudio为R的社区生态做出的卓越贡献。Shiny教学看起来还挺完善的，视频版的教学据说内容更丰富，不过说实话这连个自动字幕都没有，就纯练英语听力，实在是太为难我了，果断选择Written版。初学者的教学就7章，花了大概两个小时看完了，顺便跟着做了点练习，教学只提炼出了最基础的部分，不过也覆盖了生成一个完整的网页APP需要的部分，循序渐进好上手，有R的基础整这个还是挺方便的。
Deploy 本来想放在自己的服务器的，不过想到我服务器可怜的体量，还是别再开一个web server了。而且，shinyapps可以再Rstudio IDE中自动推送啥的，还不用再去github上整个仓库，感觉自家的工具链是真的爽，难怪有这么多人喜欢用苹果，用的不是手机，而是生态啊。
my Shiny app不过感觉在用户体验方面还是有点点小问题，初次打开太慢了，这个也确实没办法，毕竟shiny启动需要加载一堆R包，还得加载数据，而且感觉这种网页不方便进行CDN。麻烦的在于，免费版的shinyapp服务每个月只有25小时的活跃(active)时间，也就是，当一段时间无人访问时，服务器会自动进入休眠状态，那再打开网页，就又相当于一次服务重启，相当耗时。如果有思路却要等网页加载，总感觉有点耽误科研效率，嘛，反正我也有本地数据，如果实在觉得性能不行，那就去申请经费整个会员吧。
R workflow 想想最近的分析工作，大概就是：
 数据挖掘2 在linux服务器上完成对性能需求较大的mapping, counting等步骤。这步通过基于python编写的snakemake完成了流程大体上的自动化。以后最好加个multiqc完成质量控制的可视化。 可视化。在本地服务器上利用R完成数据挖掘和可视化，Rstudio是真的好用，就是字体有点难受，不好区分大小写，视觉上感觉还是更喜欢vscode。之前一直是用Rscript完成分析，这次换成是Rmarkdown。其实本质上没有区别，不过Rmarkdown可以自动生成pptx等展示文档，避免了汇报工作时还得手动插图片的尴尬3。 分享交互。用网页应用进行分享交互可能是最流行的方式了。这里采用Shiny，毕竟基于R，减少了学习成本，部署构建都挺快的，现在也还能满足需求。  通过这样一个R-&amp;gt;Rmarkdown-&amp;gt;Shiny的工作流，大体上实现了数据分析工作的自动化，最后的结果看起来也挺美观的。在这里再次感谢R的开源社区提供的强大工具，使得我甚至还有时间在这写blog。然而，还是存在平台的割裂，没有完全实现自动化。如果能把2、3步也放在远程服务器上解决就好了。这里存在的问题就是没钱4，好吧，如果能购买Rstudio的社区版就好了。这样就可以通过snakemake继续调用R脚本，打包成一个完整的流程，不过以后这流程也不一定能再走一遍了。还好，snakemake似乎支持模块化，下次把流程优化重构成一个个单独的模组吧。如果能实现，就可以避免下载文件等一堆繁琐的事情了，也不用非得待在实验室，真好啊真好啊😉。
  朕意已决？ &amp;#x21a9;&amp;#xfe0e;
 markdown怎么实现description list呀？ &amp;#x21a9;&amp;#xfe0e;
 就是感觉对ppt的支持还不够完整，当然很大可能是我太菜了。 &amp;#x21a9;&amp;#xfe0e;
 人唯一的病就是穷病？ &amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
  </channel>
</rss>
